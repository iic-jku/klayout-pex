// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extract.proto
// Protobuf C++ Version: 5.26.1

#include "extract.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kpex {
namespace tech {
      template <typename>
PROTOBUF_CONSTEXPR StyleVariant::StyleVariant(::_pbi::ConstantInitialized) {}
struct StyleVariantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleVariantDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleVariantDefaultTypeInternal() {}
  union {
    StyleVariant _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleVariantDefaultTypeInternal _StyleVariant_default_instance_;

inline constexpr ResistanceInfo_ViaResistance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : via_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        resistance_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResistanceInfo_ViaResistance::ResistanceInfo_ViaResistance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ResistanceInfo_ViaResistanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResistanceInfo_ViaResistanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResistanceInfo_ViaResistanceDefaultTypeInternal() {}
  union {
    ResistanceInfo_ViaResistance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResistanceInfo_ViaResistanceDefaultTypeInternal _ResistanceInfo_ViaResistance_default_instance_;

inline constexpr ResistanceInfo_LayerResistance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        layer_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        resistance_{0},
        corner_adjustment_fraction_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResistanceInfo_LayerResistance::ResistanceInfo_LayerResistance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ResistanceInfo_LayerResistanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResistanceInfo_LayerResistanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResistanceInfo_LayerResistanceDefaultTypeInternal() {}
  union {
    ResistanceInfo_LayerResistance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResistanceInfo_LayerResistanceDefaultTypeInternal _ResistanceInfo_LayerResistance_default_instance_;

inline constexpr CapacitanceInfo_SubstrateCapacitance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : layer_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        area_capacitance_{0},
        perimeter_capacitance_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CapacitanceInfo_SubstrateCapacitance::CapacitanceInfo_SubstrateCapacitance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CapacitanceInfo_SubstrateCapacitanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapacitanceInfo_SubstrateCapacitanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapacitanceInfo_SubstrateCapacitanceDefaultTypeInternal() {}
  union {
    CapacitanceInfo_SubstrateCapacitance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapacitanceInfo_SubstrateCapacitanceDefaultTypeInternal _CapacitanceInfo_SubstrateCapacitance_default_instance_;

inline constexpr CapacitanceInfo_SidewallCapacitance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : layer_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        capacitance_{0},
        offset_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CapacitanceInfo_SidewallCapacitance::CapacitanceInfo_SidewallCapacitance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CapacitanceInfo_SidewallCapacitanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapacitanceInfo_SidewallCapacitanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapacitanceInfo_SidewallCapacitanceDefaultTypeInternal() {}
  union {
    CapacitanceInfo_SidewallCapacitance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapacitanceInfo_SidewallCapacitanceDefaultTypeInternal _CapacitanceInfo_SidewallCapacitance_default_instance_;

inline constexpr CapacitanceInfo_SideOverlapCapacitance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : in_layer_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        out_layer_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        capacitance_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CapacitanceInfo_SideOverlapCapacitance::CapacitanceInfo_SideOverlapCapacitance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CapacitanceInfo_SideOverlapCapacitanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapacitanceInfo_SideOverlapCapacitanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapacitanceInfo_SideOverlapCapacitanceDefaultTypeInternal() {}
  union {
    CapacitanceInfo_SideOverlapCapacitance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapacitanceInfo_SideOverlapCapacitanceDefaultTypeInternal _CapacitanceInfo_SideOverlapCapacitance_default_instance_;

inline constexpr CapacitanceInfo_OverlapCapacitance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : top_layer_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bottom_layer_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        capacitance_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CapacitanceInfo_OverlapCapacitance::CapacitanceInfo_OverlapCapacitance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CapacitanceInfo_OverlapCapacitanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapacitanceInfo_OverlapCapacitanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapacitanceInfo_OverlapCapacitanceDefaultTypeInternal() {}
  union {
    CapacitanceInfo_OverlapCapacitance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapacitanceInfo_OverlapCapacitanceDefaultTypeInternal _CapacitanceInfo_OverlapCapacitance_default_instance_;

inline constexpr ResistanceInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : layers_{},
        vias_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ResistanceInfo::ResistanceInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ResistanceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResistanceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResistanceInfoDefaultTypeInternal() {}
  union {
    ResistanceInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResistanceInfoDefaultTypeInternal _ResistanceInfo_default_instance_;

inline constexpr CapacitanceInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : substrates_{},
        overlaps_{},
        sidewalls_{},
        sideoverlaps_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CapacitanceInfo::CapacitanceInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CapacitanceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapacitanceInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapacitanceInfoDefaultTypeInternal() {}
  union {
    CapacitanceInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapacitanceInfoDefaultTypeInternal _CapacitanceInfo_default_instance_;

inline constexpr ExtractionInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        resistance_{nullptr},
        capacitance_{nullptr},
        side_halo_{0},
        fringe_shield_halo_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ExtractionInfo::ExtractionInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExtractionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtractionInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtractionInfoDefaultTypeInternal() {}
  union {
    ExtractionInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtractionInfoDefaultTypeInternal _ExtractionInfo_default_instance_;
}  // namespace tech
}  // namespace kpex
static ::_pb::Metadata file_level_metadata_extract_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_extract_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_extract_2eproto = nullptr;
const ::uint32_t
    TableStruct_extract_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ExtractionInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ExtractionInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ExtractionInfo, _impl_.side_halo_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ExtractionInfo, _impl_.fringe_shield_halo_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ExtractionInfo, _impl_.resistance_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ExtractionInfo, _impl_.capacitance_),
        ~0u,
        ~0u,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo_LayerResistance, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo_LayerResistance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo_LayerResistance, _impl_.layer_name_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo_LayerResistance, _impl_.resistance_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo_LayerResistance, _impl_.corner_adjustment_fraction_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo_ViaResistance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo_ViaResistance, _impl_.via_name_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo_ViaResistance, _impl_.resistance_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo, _impl_.layers_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::ResistanceInfo, _impl_.vias_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SubstrateCapacitance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SubstrateCapacitance, _impl_.layer_name_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SubstrateCapacitance, _impl_.area_capacitance_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SubstrateCapacitance, _impl_.perimeter_capacitance_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_OverlapCapacitance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_OverlapCapacitance, _impl_.top_layer_name_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_OverlapCapacitance, _impl_.bottom_layer_name_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_OverlapCapacitance, _impl_.capacitance_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SidewallCapacitance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SidewallCapacitance, _impl_.layer_name_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SidewallCapacitance, _impl_.capacitance_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SidewallCapacitance, _impl_.offset_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SideOverlapCapacitance, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SideOverlapCapacitance, _impl_.in_layer_name_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SideOverlapCapacitance, _impl_.out_layer_name_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo_SideOverlapCapacitance, _impl_.capacitance_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo, _impl_.substrates_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo, _impl_.overlaps_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo, _impl_.sidewalls_),
        PROTOBUF_FIELD_OFFSET(::kpex::tech::CapacitanceInfo, _impl_.sideoverlaps_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kpex::tech::StyleVariant, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::kpex::tech::ExtractionInfo)},
        {16, 27, -1, sizeof(::kpex::tech::ResistanceInfo_LayerResistance)},
        {30, -1, -1, sizeof(::kpex::tech::ResistanceInfo_ViaResistance)},
        {40, -1, -1, sizeof(::kpex::tech::ResistanceInfo)},
        {50, -1, -1, sizeof(::kpex::tech::CapacitanceInfo_SubstrateCapacitance)},
        {61, -1, -1, sizeof(::kpex::tech::CapacitanceInfo_OverlapCapacitance)},
        {72, -1, -1, sizeof(::kpex::tech::CapacitanceInfo_SidewallCapacitance)},
        {83, -1, -1, sizeof(::kpex::tech::CapacitanceInfo_SideOverlapCapacitance)},
        {94, -1, -1, sizeof(::kpex::tech::CapacitanceInfo)},
        {106, -1, -1, sizeof(::kpex::tech::StyleVariant)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kpex::tech::_ExtractionInfo_default_instance_._instance,
    &::kpex::tech::_ResistanceInfo_LayerResistance_default_instance_._instance,
    &::kpex::tech::_ResistanceInfo_ViaResistance_default_instance_._instance,
    &::kpex::tech::_ResistanceInfo_default_instance_._instance,
    &::kpex::tech::_CapacitanceInfo_SubstrateCapacitance_default_instance_._instance,
    &::kpex::tech::_CapacitanceInfo_OverlapCapacitance_default_instance_._instance,
    &::kpex::tech::_CapacitanceInfo_SidewallCapacitance_default_instance_._instance,
    &::kpex::tech::_CapacitanceInfo_SideOverlapCapacitance_default_instance_._instance,
    &::kpex::tech::_CapacitanceInfo_default_instance_._instance,
    &::kpex::tech::_StyleVariant_default_instance_._instance,
};
const char descriptor_table_protodef_extract_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rextract.proto\022\tkpex.tech\"\237\001\n\016Extractio"
    "nInfo\022\021\n\tside_halo\030\n \001(\005\022\032\n\022fringe_shiel"
    "d_halo\030\013 \001(\005\022-\n\nresistance\030n \001(\0132\031.kpex."
    "tech.ResistanceInfo\022/\n\013capacitance\030o \001(\013"
    "2\032.kpex.tech.CapacitanceInfo\"\275\002\n\016Resista"
    "nceInfo\0229\n\006layers\030\001 \003(\0132).kpex.tech.Resi"
    "stanceInfo.LayerResistance\0225\n\004vias\030\002 \003(\013"
    "2\'.kpex.tech.ResistanceInfo.ViaResistanc"
    "e\032\201\001\n\017LayerResistance\022\022\n\nlayer_name\030\001 \001("
    "\t\022\022\n\nresistance\030\002 \001(\001\022\'\n\032corner_adjustme"
    "nt_fraction\030\003 \001(\001H\000\210\001\001B\035\n\033_corner_adjust"
    "ment_fraction\0325\n\rViaResistance\022\020\n\010via_na"
    "me\030\001 \001(\t\022\022\n\nresistance\030\002 \001(\001\"\230\005\n\017Capacit"
    "anceInfo\022D\n\nsubstrates\030\310\001 \003(\0132/.kpex.tec"
    "h.CapacitanceInfo.SubstrateCapacitance\022@"
    "\n\010overlaps\030\311\001 \003(\0132-.kpex.tech.Capacitanc"
    "eInfo.OverlapCapacitance\022B\n\tsidewalls\030\312\001"
    " \003(\0132..kpex.tech.CapacitanceInfo.Sidewal"
    "lCapacitance\022H\n\014sideoverlaps\030\313\001 \003(\01321.kp"
    "ex.tech.CapacitanceInfo.SideOverlapCapac"
    "itance\032c\n\024SubstrateCapacitance\022\022\n\nlayer_"
    "name\030\001 \001(\t\022\030\n\020area_capacitance\030\002 \001(\001\022\035\n\025"
    "perimeter_capacitance\030\003 \001(\001\032\\\n\022OverlapCa"
    "pacitance\022\026\n\016top_layer_name\030\001 \001(\t\022\031\n\021bot"
    "tom_layer_name\030\002 \001(\t\022\023\n\013capacitance\030\003 \001("
    "\001\032N\n\023SidewallCapacitance\022\022\n\nlayer_name\030\001"
    " \001(\t\022\023\n\013capacitance\030\002 \001(\001\022\016\n\006offset\030\003 \001("
    "\001\032\\\n\026SideOverlapCapacitance\022\025\n\rin_layer_"
    "name\030\001 \001(\t\022\026\n\016out_layer_name\030\002 \001(\t\022\023\n\013ca"
    "pacitance\030\003 \001(\001\"\016\n\014StyleVariantb\006proto3"
};
static ::absl::once_flag descriptor_table_extract_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_extract_2eproto = {
    false,
    false,
    1199,
    descriptor_table_protodef_extract_2eproto,
    "extract.proto",
    &descriptor_table_extract_2eproto_once,
    nullptr,
    0,
    10,
    schemas,
    file_default_instances,
    TableStruct_extract_2eproto::offsets,
    file_level_metadata_extract_2eproto,
    file_level_enum_descriptors_extract_2eproto,
    file_level_service_descriptors_extract_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_extract_2eproto_getter() {
  return &descriptor_table_extract_2eproto;
}
namespace kpex {
namespace tech {
// ===================================================================

class ExtractionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtractionInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_._has_bits_);
};

ExtractionInfo::ExtractionInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.ExtractionInfo)
}
inline PROTOBUF_NDEBUG_INLINE ExtractionInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ExtractionInfo::ExtractionInfo(
    ::google::protobuf::Arena* arena,
    const ExtractionInfo& from)
    : ::google::protobuf::Message(arena) {
  ExtractionInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.resistance_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kpex::tech::ResistanceInfo>(
                              arena, *from._impl_.resistance_)
                        : nullptr;
  _impl_.capacitance_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kpex::tech::CapacitanceInfo>(
                              arena, *from._impl_.capacitance_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, side_halo_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, side_halo_),
           offsetof(Impl_, fringe_shield_halo_) -
               offsetof(Impl_, side_halo_) +
               sizeof(Impl_::fringe_shield_halo_));

  // @@protoc_insertion_point(copy_constructor:kpex.tech.ExtractionInfo)
}
inline PROTOBUF_NDEBUG_INLINE ExtractionInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ExtractionInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, resistance_),
           0,
           offsetof(Impl_, fringe_shield_halo_) -
               offsetof(Impl_, resistance_) +
               sizeof(Impl_::fringe_shield_halo_));
}
ExtractionInfo::~ExtractionInfo() {
  // @@protoc_insertion_point(destructor:kpex.tech.ExtractionInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExtractionInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.resistance_;
  delete _impl_.capacitance_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ExtractionInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_._cached_size_),
              false,
          },
          &ExtractionInfo::MergeImpl,
          &ExtractionInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ExtractionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.ExtractionInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.resistance_ != nullptr);
      _impl_.resistance_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.capacitance_ != nullptr);
      _impl_.capacitance_->Clear();
    }
  }
  ::memset(&_impl_.side_halo_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fringe_shield_halo_) -
      reinterpret_cast<char*>(&_impl_.side_halo_)) + sizeof(_impl_.fringe_shield_halo_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ExtractionInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 2, 0, 7> ExtractionInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_._has_bits_),
    0, // no _extensions_
    111, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965759,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ExtractionInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::ExtractionInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 side_halo = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExtractionInfo, _impl_.side_halo_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.side_halo_)}},
    // int32 fringe_shield_halo = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExtractionInfo, _impl_.fringe_shield_halo_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.fringe_shield_halo_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .kpex.tech.ResistanceInfo resistance = 110;
    {::_pbi::TcParser::FastMtS2,
     {1778, 0, 0, PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.resistance_)}},
    // .kpex.tech.CapacitanceInfo capacitance = 111;
    {::_pbi::TcParser::FastMtS2,
     {1786, 1, 1, PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.capacitance_)}},
  }}, {{
    110, 0, 1,
    65532, 2,
    65535, 65535
  }}, {{
    // int32 side_halo = 10;
    {PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.side_halo_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 fringe_shield_halo = 11;
    {PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.fringe_shield_halo_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .kpex.tech.ResistanceInfo resistance = 110;
    {PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.resistance_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kpex.tech.CapacitanceInfo capacitance = 111;
    {PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.capacitance_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kpex::tech::ResistanceInfo>()},
    {::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo>()},
  }}, {{
  }},
};

::uint8_t* ExtractionInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.ExtractionInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 side_halo = 10;
  if (this->_internal_side_halo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_side_halo(), target);
  }

  // int32 fringe_shield_halo = 11;
  if (this->_internal_fringe_shield_halo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_fringe_shield_halo(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .kpex.tech.ResistanceInfo resistance = 110;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        110, *_impl_.resistance_, _impl_.resistance_->GetCachedSize(), target, stream);
  }

  // .kpex.tech.CapacitanceInfo capacitance = 111;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        111, *_impl_.capacitance_, _impl_.capacitance_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.ExtractionInfo)
  return target;
}

::size_t ExtractionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.ExtractionInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .kpex.tech.ResistanceInfo resistance = 110;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.resistance_);
    }

    // .kpex.tech.CapacitanceInfo capacitance = 111;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.capacitance_);
    }

  }
  // int32 side_halo = 10;
  if (this->_internal_side_halo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_side_halo());
  }

  // int32 fringe_shield_halo = 11;
  if (this->_internal_fringe_shield_halo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_fringe_shield_halo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ExtractionInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExtractionInfo*>(&to_msg);
  auto& from = static_cast<const ExtractionInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.ExtractionInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.resistance_ != nullptr);
      if (_this->_impl_.resistance_ == nullptr) {
        _this->_impl_.resistance_ =
            ::google::protobuf::Message::CopyConstruct<::kpex::tech::ResistanceInfo>(arena, *from._impl_.resistance_);
      } else {
        _this->_impl_.resistance_->MergeFrom(*from._impl_.resistance_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.capacitance_ != nullptr);
      if (_this->_impl_.capacitance_ == nullptr) {
        _this->_impl_.capacitance_ =
            ::google::protobuf::Message::CopyConstruct<::kpex::tech::CapacitanceInfo>(arena, *from._impl_.capacitance_);
      } else {
        _this->_impl_.capacitance_->MergeFrom(*from._impl_.capacitance_);
      }
    }
  }
  if (from._internal_side_halo() != 0) {
    _this->_impl_.side_halo_ = from._impl_.side_halo_;
  }
  if (from._internal_fringe_shield_halo() != 0) {
    _this->_impl_.fringe_shield_halo_ = from._impl_.fringe_shield_halo_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExtractionInfo::CopyFrom(const ExtractionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.ExtractionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ExtractionInfo::IsInitialized() const {
  return true;
}

void ExtractionInfo::InternalSwap(ExtractionInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.fringe_shield_halo_)
      + sizeof(ExtractionInfo::_impl_.fringe_shield_halo_)
      - PROTOBUF_FIELD_OFFSET(ExtractionInfo, _impl_.resistance_)>(
          reinterpret_cast<char*>(&_impl_.resistance_),
          reinterpret_cast<char*>(&other->_impl_.resistance_));
}

::google::protobuf::Metadata ExtractionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[0]);
}
// ===================================================================

class ResistanceInfo_LayerResistance::_Internal {
 public:
  using HasBits = decltype(std::declval<ResistanceInfo_LayerResistance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_._has_bits_);
};

ResistanceInfo_LayerResistance::ResistanceInfo_LayerResistance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.ResistanceInfo.LayerResistance)
}
inline PROTOBUF_NDEBUG_INLINE ResistanceInfo_LayerResistance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        layer_name_(arena, from.layer_name_) {}

ResistanceInfo_LayerResistance::ResistanceInfo_LayerResistance(
    ::google::protobuf::Arena* arena,
    const ResistanceInfo_LayerResistance& from)
    : ::google::protobuf::Message(arena) {
  ResistanceInfo_LayerResistance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, resistance_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, resistance_),
           offsetof(Impl_, corner_adjustment_fraction_) -
               offsetof(Impl_, resistance_) +
               sizeof(Impl_::corner_adjustment_fraction_));

  // @@protoc_insertion_point(copy_constructor:kpex.tech.ResistanceInfo.LayerResistance)
}
inline PROTOBUF_NDEBUG_INLINE ResistanceInfo_LayerResistance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        layer_name_(arena) {}

inline void ResistanceInfo_LayerResistance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, resistance_),
           0,
           offsetof(Impl_, corner_adjustment_fraction_) -
               offsetof(Impl_, resistance_) +
               sizeof(Impl_::corner_adjustment_fraction_));
}
ResistanceInfo_LayerResistance::~ResistanceInfo_LayerResistance() {
  // @@protoc_insertion_point(destructor:kpex.tech.ResistanceInfo.LayerResistance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ResistanceInfo_LayerResistance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.layer_name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ResistanceInfo_LayerResistance::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_._cached_size_),
              false,
          },
          &ResistanceInfo_LayerResistance::MergeImpl,
          &ResistanceInfo_LayerResistance::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ResistanceInfo_LayerResistance::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.ResistanceInfo.LayerResistance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layer_name_.ClearToEmpty();
  _impl_.resistance_ = 0;
  _impl_.corner_adjustment_fraction_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ResistanceInfo_LayerResistance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 59, 2> ResistanceInfo_LayerResistance::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ResistanceInfo_LayerResistance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::ResistanceInfo_LayerResistance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string layer_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_.layer_name_)}},
    // double resistance = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_.resistance_)}},
    // optional double corner_adjustment_fraction = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 0, 0, PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_.corner_adjustment_fraction_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string layer_name = 1;
    {PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_.layer_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double resistance = 2;
    {PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_.resistance_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // optional double corner_adjustment_fraction = 3;
    {PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_.corner_adjustment_fraction_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\50\12\0\0\0\0\0\0"
    "kpex.tech.ResistanceInfo.LayerResistance"
    "layer_name"
  }},
};

::uint8_t* ResistanceInfo_LayerResistance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.ResistanceInfo.LayerResistance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string layer_name = 1;
  if (!this->_internal_layer_name().empty()) {
    const std::string& _s = this->_internal_layer_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kpex.tech.ResistanceInfo.LayerResistance.layer_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double resistance = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_resistance = this->_internal_resistance();
  ::uint64_t raw_resistance;
  memcpy(&raw_resistance, &tmp_resistance, sizeof(tmp_resistance));
  if (raw_resistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_resistance(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double corner_adjustment_fraction = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_corner_adjustment_fraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.ResistanceInfo.LayerResistance)
  return target;
}

::size_t ResistanceInfo_LayerResistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.ResistanceInfo.LayerResistance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string layer_name = 1;
  if (!this->_internal_layer_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_layer_name());
  }

  // double resistance = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_resistance = this->_internal_resistance();
  ::uint64_t raw_resistance;
  memcpy(&raw_resistance, &tmp_resistance, sizeof(tmp_resistance));
  if (raw_resistance != 0) {
    total_size += 9;
  }

  // optional double corner_adjustment_fraction = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ResistanceInfo_LayerResistance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResistanceInfo_LayerResistance*>(&to_msg);
  auto& from = static_cast<const ResistanceInfo_LayerResistance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.ResistanceInfo.LayerResistance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_layer_name().empty()) {
    _this->_internal_set_layer_name(from._internal_layer_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_resistance = from._internal_resistance();
  ::uint64_t raw_resistance;
  memcpy(&raw_resistance, &tmp_resistance, sizeof(tmp_resistance));
  if (raw_resistance != 0) {
    _this->_impl_.resistance_ = from._impl_.resistance_;
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.corner_adjustment_fraction_ = from._impl_.corner_adjustment_fraction_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResistanceInfo_LayerResistance::CopyFrom(const ResistanceInfo_LayerResistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.ResistanceInfo.LayerResistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ResistanceInfo_LayerResistance::IsInitialized() const {
  return true;
}

void ResistanceInfo_LayerResistance::InternalSwap(ResistanceInfo_LayerResistance* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.layer_name_, &other->_impl_.layer_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_.corner_adjustment_fraction_)
      + sizeof(ResistanceInfo_LayerResistance::_impl_.corner_adjustment_fraction_)
      - PROTOBUF_FIELD_OFFSET(ResistanceInfo_LayerResistance, _impl_.resistance_)>(
          reinterpret_cast<char*>(&_impl_.resistance_),
          reinterpret_cast<char*>(&other->_impl_.resistance_));
}

::google::protobuf::Metadata ResistanceInfo_LayerResistance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[1]);
}
// ===================================================================

class ResistanceInfo_ViaResistance::_Internal {
 public:
};

ResistanceInfo_ViaResistance::ResistanceInfo_ViaResistance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.ResistanceInfo.ViaResistance)
}
inline PROTOBUF_NDEBUG_INLINE ResistanceInfo_ViaResistance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : via_name_(arena, from.via_name_),
        _cached_size_{0} {}

ResistanceInfo_ViaResistance::ResistanceInfo_ViaResistance(
    ::google::protobuf::Arena* arena,
    const ResistanceInfo_ViaResistance& from)
    : ::google::protobuf::Message(arena) {
  ResistanceInfo_ViaResistance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.resistance_ = from._impl_.resistance_;

  // @@protoc_insertion_point(copy_constructor:kpex.tech.ResistanceInfo.ViaResistance)
}
inline PROTOBUF_NDEBUG_INLINE ResistanceInfo_ViaResistance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : via_name_(arena),
        _cached_size_{0} {}

inline void ResistanceInfo_ViaResistance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.resistance_ = {};
}
ResistanceInfo_ViaResistance::~ResistanceInfo_ViaResistance() {
  // @@protoc_insertion_point(destructor:kpex.tech.ResistanceInfo.ViaResistance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ResistanceInfo_ViaResistance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.via_name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ResistanceInfo_ViaResistance::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ResistanceInfo_ViaResistance, _impl_._cached_size_),
              false,
          },
          &ResistanceInfo_ViaResistance::MergeImpl,
          &ResistanceInfo_ViaResistance::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ResistanceInfo_ViaResistance::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.ResistanceInfo.ViaResistance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.via_name_.ClearToEmpty();
  _impl_.resistance_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ResistanceInfo_ViaResistance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 55, 2> ResistanceInfo_ViaResistance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ResistanceInfo_ViaResistance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::ResistanceInfo_ViaResistance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double resistance = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ResistanceInfo_ViaResistance, _impl_.resistance_)}},
    // string via_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResistanceInfo_ViaResistance, _impl_.via_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string via_name = 1;
    {PROTOBUF_FIELD_OFFSET(ResistanceInfo_ViaResistance, _impl_.via_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double resistance = 2;
    {PROTOBUF_FIELD_OFFSET(ResistanceInfo_ViaResistance, _impl_.resistance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\46\10\0\0\0\0\0\0"
    "kpex.tech.ResistanceInfo.ViaResistance"
    "via_name"
  }},
};

::uint8_t* ResistanceInfo_ViaResistance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.ResistanceInfo.ViaResistance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string via_name = 1;
  if (!this->_internal_via_name().empty()) {
    const std::string& _s = this->_internal_via_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kpex.tech.ResistanceInfo.ViaResistance.via_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double resistance = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_resistance = this->_internal_resistance();
  ::uint64_t raw_resistance;
  memcpy(&raw_resistance, &tmp_resistance, sizeof(tmp_resistance));
  if (raw_resistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_resistance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.ResistanceInfo.ViaResistance)
  return target;
}

::size_t ResistanceInfo_ViaResistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.ResistanceInfo.ViaResistance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string via_name = 1;
  if (!this->_internal_via_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_via_name());
  }

  // double resistance = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_resistance = this->_internal_resistance();
  ::uint64_t raw_resistance;
  memcpy(&raw_resistance, &tmp_resistance, sizeof(tmp_resistance));
  if (raw_resistance != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ResistanceInfo_ViaResistance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResistanceInfo_ViaResistance*>(&to_msg);
  auto& from = static_cast<const ResistanceInfo_ViaResistance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.ResistanceInfo.ViaResistance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_via_name().empty()) {
    _this->_internal_set_via_name(from._internal_via_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_resistance = from._internal_resistance();
  ::uint64_t raw_resistance;
  memcpy(&raw_resistance, &tmp_resistance, sizeof(tmp_resistance));
  if (raw_resistance != 0) {
    _this->_impl_.resistance_ = from._impl_.resistance_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResistanceInfo_ViaResistance::CopyFrom(const ResistanceInfo_ViaResistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.ResistanceInfo.ViaResistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ResistanceInfo_ViaResistance::IsInitialized() const {
  return true;
}

void ResistanceInfo_ViaResistance::InternalSwap(ResistanceInfo_ViaResistance* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.via_name_, &other->_impl_.via_name_, arena);
        swap(_impl_.resistance_, other->_impl_.resistance_);
}

::google::protobuf::Metadata ResistanceInfo_ViaResistance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[2]);
}
// ===================================================================

class ResistanceInfo::_Internal {
 public:
};

ResistanceInfo::ResistanceInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.ResistanceInfo)
}
inline PROTOBUF_NDEBUG_INLINE ResistanceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : layers_{visibility, arena, from.layers_},
        vias_{visibility, arena, from.vias_},
        _cached_size_{0} {}

ResistanceInfo::ResistanceInfo(
    ::google::protobuf::Arena* arena,
    const ResistanceInfo& from)
    : ::google::protobuf::Message(arena) {
  ResistanceInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:kpex.tech.ResistanceInfo)
}
inline PROTOBUF_NDEBUG_INLINE ResistanceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : layers_{visibility, arena},
        vias_{visibility, arena},
        _cached_size_{0} {}

inline void ResistanceInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ResistanceInfo::~ResistanceInfo() {
  // @@protoc_insertion_point(destructor:kpex.tech.ResistanceInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ResistanceInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ResistanceInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ResistanceInfo, _impl_._cached_size_),
              false,
          },
          &ResistanceInfo::MergeImpl,
          &ResistanceInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ResistanceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.ResistanceInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.vias_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ResistanceInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> ResistanceInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ResistanceInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::ResistanceInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .kpex.tech.ResistanceInfo.ViaResistance vias = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ResistanceInfo, _impl_.vias_)}},
    // repeated .kpex.tech.ResistanceInfo.LayerResistance layers = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ResistanceInfo, _impl_.layers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .kpex.tech.ResistanceInfo.LayerResistance layers = 1;
    {PROTOBUF_FIELD_OFFSET(ResistanceInfo, _impl_.layers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kpex.tech.ResistanceInfo.ViaResistance vias = 2;
    {PROTOBUF_FIELD_OFFSET(ResistanceInfo, _impl_.vias_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kpex::tech::ResistanceInfo_LayerResistance>()},
    {::_pbi::TcParser::GetTable<::kpex::tech::ResistanceInfo_ViaResistance>()},
  }}, {{
  }},
};

::uint8_t* ResistanceInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.ResistanceInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .kpex.tech.ResistanceInfo.LayerResistance layers = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_layers_size());
       i < n; i++) {
    const auto& repfield = this->_internal_layers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .kpex.tech.ResistanceInfo.ViaResistance vias = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_vias_size());
       i < n; i++) {
    const auto& repfield = this->_internal_vias().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.ResistanceInfo)
  return target;
}

::size_t ResistanceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.ResistanceInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kpex.tech.ResistanceInfo.LayerResistance layers = 1;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->_internal_layers()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .kpex.tech.ResistanceInfo.ViaResistance vias = 2;
  total_size += 1UL * this->_internal_vias_size();
  for (const auto& msg : this->_internal_vias()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ResistanceInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResistanceInfo*>(&to_msg);
  auto& from = static_cast<const ResistanceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.ResistanceInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_layers()->MergeFrom(
      from._internal_layers());
  _this->_internal_mutable_vias()->MergeFrom(
      from._internal_vias());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResistanceInfo::CopyFrom(const ResistanceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.ResistanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ResistanceInfo::IsInitialized() const {
  return true;
}

void ResistanceInfo::InternalSwap(ResistanceInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  _impl_.vias_.InternalSwap(&other->_impl_.vias_);
}

::google::protobuf::Metadata ResistanceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[3]);
}
// ===================================================================

class CapacitanceInfo_SubstrateCapacitance::_Internal {
 public:
};

CapacitanceInfo_SubstrateCapacitance::CapacitanceInfo_SubstrateCapacitance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo_SubstrateCapacitance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : layer_name_(arena, from.layer_name_),
        _cached_size_{0} {}

CapacitanceInfo_SubstrateCapacitance::CapacitanceInfo_SubstrateCapacitance(
    ::google::protobuf::Arena* arena,
    const CapacitanceInfo_SubstrateCapacitance& from)
    : ::google::protobuf::Message(arena) {
  CapacitanceInfo_SubstrateCapacitance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, area_capacitance_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, area_capacitance_),
           offsetof(Impl_, perimeter_capacitance_) -
               offsetof(Impl_, area_capacitance_) +
               sizeof(Impl_::perimeter_capacitance_));

  // @@protoc_insertion_point(copy_constructor:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo_SubstrateCapacitance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : layer_name_(arena),
        _cached_size_{0} {}

inline void CapacitanceInfo_SubstrateCapacitance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, area_capacitance_),
           0,
           offsetof(Impl_, perimeter_capacitance_) -
               offsetof(Impl_, area_capacitance_) +
               sizeof(Impl_::perimeter_capacitance_));
}
CapacitanceInfo_SubstrateCapacitance::~CapacitanceInfo_SubstrateCapacitance() {
  // @@protoc_insertion_point(destructor:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CapacitanceInfo_SubstrateCapacitance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.layer_name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CapacitanceInfo_SubstrateCapacitance::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_._cached_size_),
              false,
          },
          &CapacitanceInfo_SubstrateCapacitance::MergeImpl,
          &CapacitanceInfo_SubstrateCapacitance::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CapacitanceInfo_SubstrateCapacitance::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layer_name_.ClearToEmpty();
  ::memset(&_impl_.area_capacitance_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.perimeter_capacitance_) -
      reinterpret_cast<char*>(&_impl_.area_capacitance_)) + sizeof(_impl_.perimeter_capacitance_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CapacitanceInfo_SubstrateCapacitance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 65, 2> CapacitanceInfo_SubstrateCapacitance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CapacitanceInfo_SubstrateCapacitance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo_SubstrateCapacitance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string layer_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_.layer_name_)}},
    // double area_capacitance = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_.area_capacitance_)}},
    // double perimeter_capacitance = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_.perimeter_capacitance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string layer_name = 1;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_.layer_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double area_capacitance = 2;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_.area_capacitance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double perimeter_capacitance = 3;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_.perimeter_capacitance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\56\12\0\0\0\0\0\0"
    "kpex.tech.CapacitanceInfo.SubstrateCapacitance"
    "layer_name"
  }},
};

::uint8_t* CapacitanceInfo_SubstrateCapacitance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string layer_name = 1;
  if (!this->_internal_layer_name().empty()) {
    const std::string& _s = this->_internal_layer_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kpex.tech.CapacitanceInfo.SubstrateCapacitance.layer_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double area_capacitance = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_area_capacitance = this->_internal_area_capacitance();
  ::uint64_t raw_area_capacitance;
  memcpy(&raw_area_capacitance, &tmp_area_capacitance, sizeof(tmp_area_capacitance));
  if (raw_area_capacitance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_area_capacitance(), target);
  }

  // double perimeter_capacitance = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_perimeter_capacitance = this->_internal_perimeter_capacitance();
  ::uint64_t raw_perimeter_capacitance;
  memcpy(&raw_perimeter_capacitance, &tmp_perimeter_capacitance, sizeof(tmp_perimeter_capacitance));
  if (raw_perimeter_capacitance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_perimeter_capacitance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
  return target;
}

::size_t CapacitanceInfo_SubstrateCapacitance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string layer_name = 1;
  if (!this->_internal_layer_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_layer_name());
  }

  // double area_capacitance = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_area_capacitance = this->_internal_area_capacitance();
  ::uint64_t raw_area_capacitance;
  memcpy(&raw_area_capacitance, &tmp_area_capacitance, sizeof(tmp_area_capacitance));
  if (raw_area_capacitance != 0) {
    total_size += 9;
  }

  // double perimeter_capacitance = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_perimeter_capacitance = this->_internal_perimeter_capacitance();
  ::uint64_t raw_perimeter_capacitance;
  memcpy(&raw_perimeter_capacitance, &tmp_perimeter_capacitance, sizeof(tmp_perimeter_capacitance));
  if (raw_perimeter_capacitance != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CapacitanceInfo_SubstrateCapacitance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CapacitanceInfo_SubstrateCapacitance*>(&to_msg);
  auto& from = static_cast<const CapacitanceInfo_SubstrateCapacitance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_layer_name().empty()) {
    _this->_internal_set_layer_name(from._internal_layer_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_area_capacitance = from._internal_area_capacitance();
  ::uint64_t raw_area_capacitance;
  memcpy(&raw_area_capacitance, &tmp_area_capacitance, sizeof(tmp_area_capacitance));
  if (raw_area_capacitance != 0) {
    _this->_impl_.area_capacitance_ = from._impl_.area_capacitance_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_perimeter_capacitance = from._internal_perimeter_capacitance();
  ::uint64_t raw_perimeter_capacitance;
  memcpy(&raw_perimeter_capacitance, &tmp_perimeter_capacitance, sizeof(tmp_perimeter_capacitance));
  if (raw_perimeter_capacitance != 0) {
    _this->_impl_.perimeter_capacitance_ = from._impl_.perimeter_capacitance_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CapacitanceInfo_SubstrateCapacitance::CopyFrom(const CapacitanceInfo_SubstrateCapacitance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.CapacitanceInfo.SubstrateCapacitance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CapacitanceInfo_SubstrateCapacitance::IsInitialized() const {
  return true;
}

void CapacitanceInfo_SubstrateCapacitance::InternalSwap(CapacitanceInfo_SubstrateCapacitance* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.layer_name_, &other->_impl_.layer_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_.perimeter_capacitance_)
      + sizeof(CapacitanceInfo_SubstrateCapacitance::_impl_.perimeter_capacitance_)
      - PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SubstrateCapacitance, _impl_.area_capacitance_)>(
          reinterpret_cast<char*>(&_impl_.area_capacitance_),
          reinterpret_cast<char*>(&other->_impl_.area_capacitance_));
}

::google::protobuf::Metadata CapacitanceInfo_SubstrateCapacitance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[4]);
}
// ===================================================================

class CapacitanceInfo_OverlapCapacitance::_Internal {
 public:
};

CapacitanceInfo_OverlapCapacitance::CapacitanceInfo_OverlapCapacitance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.CapacitanceInfo.OverlapCapacitance)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo_OverlapCapacitance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : top_layer_name_(arena, from.top_layer_name_),
        bottom_layer_name_(arena, from.bottom_layer_name_),
        _cached_size_{0} {}

CapacitanceInfo_OverlapCapacitance::CapacitanceInfo_OverlapCapacitance(
    ::google::protobuf::Arena* arena,
    const CapacitanceInfo_OverlapCapacitance& from)
    : ::google::protobuf::Message(arena) {
  CapacitanceInfo_OverlapCapacitance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.capacitance_ = from._impl_.capacitance_;

  // @@protoc_insertion_point(copy_constructor:kpex.tech.CapacitanceInfo.OverlapCapacitance)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo_OverlapCapacitance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : top_layer_name_(arena),
        bottom_layer_name_(arena),
        _cached_size_{0} {}

inline void CapacitanceInfo_OverlapCapacitance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.capacitance_ = {};
}
CapacitanceInfo_OverlapCapacitance::~CapacitanceInfo_OverlapCapacitance() {
  // @@protoc_insertion_point(destructor:kpex.tech.CapacitanceInfo.OverlapCapacitance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CapacitanceInfo_OverlapCapacitance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.top_layer_name_.Destroy();
  _impl_.bottom_layer_name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CapacitanceInfo_OverlapCapacitance::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CapacitanceInfo_OverlapCapacitance, _impl_._cached_size_),
              false,
          },
          &CapacitanceInfo_OverlapCapacitance::MergeImpl,
          &CapacitanceInfo_OverlapCapacitance::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CapacitanceInfo_OverlapCapacitance::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.CapacitanceInfo.OverlapCapacitance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.top_layer_name_.ClearToEmpty();
  _impl_.bottom_layer_name_.ClearToEmpty();
  _impl_.capacitance_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CapacitanceInfo_OverlapCapacitance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 84, 2> CapacitanceInfo_OverlapCapacitance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CapacitanceInfo_OverlapCapacitance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo_OverlapCapacitance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string top_layer_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_OverlapCapacitance, _impl_.top_layer_name_)}},
    // string bottom_layer_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_OverlapCapacitance, _impl_.bottom_layer_name_)}},
    // double capacitance = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_OverlapCapacitance, _impl_.capacitance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string top_layer_name = 1;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_OverlapCapacitance, _impl_.top_layer_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string bottom_layer_name = 2;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_OverlapCapacitance, _impl_.bottom_layer_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double capacitance = 3;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_OverlapCapacitance, _impl_.capacitance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\54\16\21\0\0\0\0\0"
    "kpex.tech.CapacitanceInfo.OverlapCapacitance"
    "top_layer_name"
    "bottom_layer_name"
  }},
};

::uint8_t* CapacitanceInfo_OverlapCapacitance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.CapacitanceInfo.OverlapCapacitance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string top_layer_name = 1;
  if (!this->_internal_top_layer_name().empty()) {
    const std::string& _s = this->_internal_top_layer_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kpex.tech.CapacitanceInfo.OverlapCapacitance.top_layer_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string bottom_layer_name = 2;
  if (!this->_internal_bottom_layer_name().empty()) {
    const std::string& _s = this->_internal_bottom_layer_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kpex.tech.CapacitanceInfo.OverlapCapacitance.bottom_layer_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // double capacitance = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = this->_internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_capacitance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.CapacitanceInfo.OverlapCapacitance)
  return target;
}

::size_t CapacitanceInfo_OverlapCapacitance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.CapacitanceInfo.OverlapCapacitance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string top_layer_name = 1;
  if (!this->_internal_top_layer_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_top_layer_name());
  }

  // string bottom_layer_name = 2;
  if (!this->_internal_bottom_layer_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_bottom_layer_name());
  }

  // double capacitance = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = this->_internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CapacitanceInfo_OverlapCapacitance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CapacitanceInfo_OverlapCapacitance*>(&to_msg);
  auto& from = static_cast<const CapacitanceInfo_OverlapCapacitance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.CapacitanceInfo.OverlapCapacitance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_top_layer_name().empty()) {
    _this->_internal_set_top_layer_name(from._internal_top_layer_name());
  }
  if (!from._internal_bottom_layer_name().empty()) {
    _this->_internal_set_bottom_layer_name(from._internal_bottom_layer_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = from._internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    _this->_impl_.capacitance_ = from._impl_.capacitance_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CapacitanceInfo_OverlapCapacitance::CopyFrom(const CapacitanceInfo_OverlapCapacitance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.CapacitanceInfo.OverlapCapacitance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CapacitanceInfo_OverlapCapacitance::IsInitialized() const {
  return true;
}

void CapacitanceInfo_OverlapCapacitance::InternalSwap(CapacitanceInfo_OverlapCapacitance* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.top_layer_name_, &other->_impl_.top_layer_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bottom_layer_name_, &other->_impl_.bottom_layer_name_, arena);
        swap(_impl_.capacitance_, other->_impl_.capacitance_);
}

::google::protobuf::Metadata CapacitanceInfo_OverlapCapacitance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[5]);
}
// ===================================================================

class CapacitanceInfo_SidewallCapacitance::_Internal {
 public:
};

CapacitanceInfo_SidewallCapacitance::CapacitanceInfo_SidewallCapacitance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.CapacitanceInfo.SidewallCapacitance)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo_SidewallCapacitance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : layer_name_(arena, from.layer_name_),
        _cached_size_{0} {}

CapacitanceInfo_SidewallCapacitance::CapacitanceInfo_SidewallCapacitance(
    ::google::protobuf::Arena* arena,
    const CapacitanceInfo_SidewallCapacitance& from)
    : ::google::protobuf::Message(arena) {
  CapacitanceInfo_SidewallCapacitance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, capacitance_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, capacitance_),
           offsetof(Impl_, offset_) -
               offsetof(Impl_, capacitance_) +
               sizeof(Impl_::offset_));

  // @@protoc_insertion_point(copy_constructor:kpex.tech.CapacitanceInfo.SidewallCapacitance)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo_SidewallCapacitance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : layer_name_(arena),
        _cached_size_{0} {}

inline void CapacitanceInfo_SidewallCapacitance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, capacitance_),
           0,
           offsetof(Impl_, offset_) -
               offsetof(Impl_, capacitance_) +
               sizeof(Impl_::offset_));
}
CapacitanceInfo_SidewallCapacitance::~CapacitanceInfo_SidewallCapacitance() {
  // @@protoc_insertion_point(destructor:kpex.tech.CapacitanceInfo.SidewallCapacitance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CapacitanceInfo_SidewallCapacitance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.layer_name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CapacitanceInfo_SidewallCapacitance::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_._cached_size_),
              false,
          },
          &CapacitanceInfo_SidewallCapacitance::MergeImpl,
          &CapacitanceInfo_SidewallCapacitance::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CapacitanceInfo_SidewallCapacitance::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.CapacitanceInfo.SidewallCapacitance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layer_name_.ClearToEmpty();
  ::memset(&_impl_.capacitance_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.capacitance_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CapacitanceInfo_SidewallCapacitance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 64, 2> CapacitanceInfo_SidewallCapacitance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CapacitanceInfo_SidewallCapacitance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo_SidewallCapacitance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string layer_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_.layer_name_)}},
    // double capacitance = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_.capacitance_)}},
    // double offset = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_.offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string layer_name = 1;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_.layer_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double capacitance = 2;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_.capacitance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double offset = 3;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_.offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\55\12\0\0\0\0\0\0"
    "kpex.tech.CapacitanceInfo.SidewallCapacitance"
    "layer_name"
  }},
};

::uint8_t* CapacitanceInfo_SidewallCapacitance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.CapacitanceInfo.SidewallCapacitance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string layer_name = 1;
  if (!this->_internal_layer_name().empty()) {
    const std::string& _s = this->_internal_layer_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kpex.tech.CapacitanceInfo.SidewallCapacitance.layer_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double capacitance = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = this->_internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_capacitance(), target);
  }

  // double offset = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.CapacitanceInfo.SidewallCapacitance)
  return target;
}

::size_t CapacitanceInfo_SidewallCapacitance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.CapacitanceInfo.SidewallCapacitance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string layer_name = 1;
  if (!this->_internal_layer_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_layer_name());
  }

  // double capacitance = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = this->_internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    total_size += 9;
  }

  // double offset = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CapacitanceInfo_SidewallCapacitance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CapacitanceInfo_SidewallCapacitance*>(&to_msg);
  auto& from = static_cast<const CapacitanceInfo_SidewallCapacitance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.CapacitanceInfo.SidewallCapacitance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_layer_name().empty()) {
    _this->_internal_set_layer_name(from._internal_layer_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = from._internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    _this->_impl_.capacitance_ = from._impl_.capacitance_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = from._internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    _this->_impl_.offset_ = from._impl_.offset_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CapacitanceInfo_SidewallCapacitance::CopyFrom(const CapacitanceInfo_SidewallCapacitance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.CapacitanceInfo.SidewallCapacitance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CapacitanceInfo_SidewallCapacitance::IsInitialized() const {
  return true;
}

void CapacitanceInfo_SidewallCapacitance::InternalSwap(CapacitanceInfo_SidewallCapacitance* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.layer_name_, &other->_impl_.layer_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_.offset_)
      + sizeof(CapacitanceInfo_SidewallCapacitance::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SidewallCapacitance, _impl_.capacitance_)>(
          reinterpret_cast<char*>(&_impl_.capacitance_),
          reinterpret_cast<char*>(&other->_impl_.capacitance_));
}

::google::protobuf::Metadata CapacitanceInfo_SidewallCapacitance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[6]);
}
// ===================================================================

class CapacitanceInfo_SideOverlapCapacitance::_Internal {
 public:
};

CapacitanceInfo_SideOverlapCapacitance::CapacitanceInfo_SideOverlapCapacitance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo_SideOverlapCapacitance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : in_layer_name_(arena, from.in_layer_name_),
        out_layer_name_(arena, from.out_layer_name_),
        _cached_size_{0} {}

CapacitanceInfo_SideOverlapCapacitance::CapacitanceInfo_SideOverlapCapacitance(
    ::google::protobuf::Arena* arena,
    const CapacitanceInfo_SideOverlapCapacitance& from)
    : ::google::protobuf::Message(arena) {
  CapacitanceInfo_SideOverlapCapacitance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.capacitance_ = from._impl_.capacitance_;

  // @@protoc_insertion_point(copy_constructor:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo_SideOverlapCapacitance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : in_layer_name_(arena),
        out_layer_name_(arena),
        _cached_size_{0} {}

inline void CapacitanceInfo_SideOverlapCapacitance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.capacitance_ = {};
}
CapacitanceInfo_SideOverlapCapacitance::~CapacitanceInfo_SideOverlapCapacitance() {
  // @@protoc_insertion_point(destructor:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CapacitanceInfo_SideOverlapCapacitance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.in_layer_name_.Destroy();
  _impl_.out_layer_name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CapacitanceInfo_SideOverlapCapacitance::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SideOverlapCapacitance, _impl_._cached_size_),
              false,
          },
          &CapacitanceInfo_SideOverlapCapacitance::MergeImpl,
          &CapacitanceInfo_SideOverlapCapacitance::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CapacitanceInfo_SideOverlapCapacitance::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.in_layer_name_.ClearToEmpty();
  _impl_.out_layer_name_.ClearToEmpty();
  _impl_.capacitance_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CapacitanceInfo_SideOverlapCapacitance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 84, 2> CapacitanceInfo_SideOverlapCapacitance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CapacitanceInfo_SideOverlapCapacitance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo_SideOverlapCapacitance>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string in_layer_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SideOverlapCapacitance, _impl_.in_layer_name_)}},
    // string out_layer_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SideOverlapCapacitance, _impl_.out_layer_name_)}},
    // double capacitance = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SideOverlapCapacitance, _impl_.capacitance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string in_layer_name = 1;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SideOverlapCapacitance, _impl_.in_layer_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string out_layer_name = 2;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SideOverlapCapacitance, _impl_.out_layer_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double capacitance = 3;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo_SideOverlapCapacitance, _impl_.capacitance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\60\15\16\0\0\0\0\0"
    "kpex.tech.CapacitanceInfo.SideOverlapCapacitance"
    "in_layer_name"
    "out_layer_name"
  }},
};

::uint8_t* CapacitanceInfo_SideOverlapCapacitance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string in_layer_name = 1;
  if (!this->_internal_in_layer_name().empty()) {
    const std::string& _s = this->_internal_in_layer_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kpex.tech.CapacitanceInfo.SideOverlapCapacitance.in_layer_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string out_layer_name = 2;
  if (!this->_internal_out_layer_name().empty()) {
    const std::string& _s = this->_internal_out_layer_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kpex.tech.CapacitanceInfo.SideOverlapCapacitance.out_layer_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // double capacitance = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = this->_internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_capacitance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
  return target;
}

::size_t CapacitanceInfo_SideOverlapCapacitance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string in_layer_name = 1;
  if (!this->_internal_in_layer_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_in_layer_name());
  }

  // string out_layer_name = 2;
  if (!this->_internal_out_layer_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_out_layer_name());
  }

  // double capacitance = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = this->_internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CapacitanceInfo_SideOverlapCapacitance::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CapacitanceInfo_SideOverlapCapacitance*>(&to_msg);
  auto& from = static_cast<const CapacitanceInfo_SideOverlapCapacitance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_in_layer_name().empty()) {
    _this->_internal_set_in_layer_name(from._internal_in_layer_name());
  }
  if (!from._internal_out_layer_name().empty()) {
    _this->_internal_set_out_layer_name(from._internal_out_layer_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_capacitance = from._internal_capacitance();
  ::uint64_t raw_capacitance;
  memcpy(&raw_capacitance, &tmp_capacitance, sizeof(tmp_capacitance));
  if (raw_capacitance != 0) {
    _this->_impl_.capacitance_ = from._impl_.capacitance_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CapacitanceInfo_SideOverlapCapacitance::CopyFrom(const CapacitanceInfo_SideOverlapCapacitance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.CapacitanceInfo.SideOverlapCapacitance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CapacitanceInfo_SideOverlapCapacitance::IsInitialized() const {
  return true;
}

void CapacitanceInfo_SideOverlapCapacitance::InternalSwap(CapacitanceInfo_SideOverlapCapacitance* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.in_layer_name_, &other->_impl_.in_layer_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.out_layer_name_, &other->_impl_.out_layer_name_, arena);
        swap(_impl_.capacitance_, other->_impl_.capacitance_);
}

::google::protobuf::Metadata CapacitanceInfo_SideOverlapCapacitance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[7]);
}
// ===================================================================

class CapacitanceInfo::_Internal {
 public:
};

CapacitanceInfo::CapacitanceInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kpex.tech.CapacitanceInfo)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : substrates_{visibility, arena, from.substrates_},
        overlaps_{visibility, arena, from.overlaps_},
        sidewalls_{visibility, arena, from.sidewalls_},
        sideoverlaps_{visibility, arena, from.sideoverlaps_},
        _cached_size_{0} {}

CapacitanceInfo::CapacitanceInfo(
    ::google::protobuf::Arena* arena,
    const CapacitanceInfo& from)
    : ::google::protobuf::Message(arena) {
  CapacitanceInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:kpex.tech.CapacitanceInfo)
}
inline PROTOBUF_NDEBUG_INLINE CapacitanceInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : substrates_{visibility, arena},
        overlaps_{visibility, arena},
        sidewalls_{visibility, arena},
        sideoverlaps_{visibility, arena},
        _cached_size_{0} {}

inline void CapacitanceInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CapacitanceInfo::~CapacitanceInfo() {
  // @@protoc_insertion_point(destructor:kpex.tech.CapacitanceInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CapacitanceInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CapacitanceInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_._cached_size_),
              false,
          },
          &CapacitanceInfo::MergeImpl,
          &CapacitanceInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void CapacitanceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kpex.tech.CapacitanceInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.substrates_.Clear();
  _impl_.overlaps_.Clear();
  _impl_.sidewalls_.Clear();
  _impl_.sideoverlaps_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CapacitanceInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 7> CapacitanceInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    203, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CapacitanceInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .kpex.tech.CapacitanceInfo.SubstrateCapacitance substrates = 200;
    {::_pbi::TcParser::FastMtR2,
     {3266, 63, 0, PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_.substrates_)}},
    // repeated .kpex.tech.CapacitanceInfo.OverlapCapacitance overlaps = 201;
    {::_pbi::TcParser::FastMtR2,
     {3274, 63, 1, PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_.overlaps_)}},
    // repeated .kpex.tech.CapacitanceInfo.SidewallCapacitance sidewalls = 202;
    {::_pbi::TcParser::FastMtR2,
     {3282, 63, 2, PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_.sidewalls_)}},
    // repeated .kpex.tech.CapacitanceInfo.SideOverlapCapacitance sideoverlaps = 203;
    {::_pbi::TcParser::FastMtR2,
     {3290, 63, 3, PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_.sideoverlaps_)}},
  }}, {{
    200, 0, 1,
    65520, 0,
    65535, 65535
  }}, {{
    // repeated .kpex.tech.CapacitanceInfo.SubstrateCapacitance substrates = 200;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_.substrates_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kpex.tech.CapacitanceInfo.OverlapCapacitance overlaps = 201;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_.overlaps_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kpex.tech.CapacitanceInfo.SidewallCapacitance sidewalls = 202;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_.sidewalls_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kpex.tech.CapacitanceInfo.SideOverlapCapacitance sideoverlaps = 203;
    {PROTOBUF_FIELD_OFFSET(CapacitanceInfo, _impl_.sideoverlaps_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo_SubstrateCapacitance>()},
    {::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo_OverlapCapacitance>()},
    {::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo_SidewallCapacitance>()},
    {::_pbi::TcParser::GetTable<::kpex::tech::CapacitanceInfo_SideOverlapCapacitance>()},
  }}, {{
  }},
};

::uint8_t* CapacitanceInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kpex.tech.CapacitanceInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .kpex.tech.CapacitanceInfo.SubstrateCapacitance substrates = 200;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_substrates_size());
       i < n; i++) {
    const auto& repfield = this->_internal_substrates().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            200, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .kpex.tech.CapacitanceInfo.OverlapCapacitance overlaps = 201;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_overlaps_size());
       i < n; i++) {
    const auto& repfield = this->_internal_overlaps().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            201, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .kpex.tech.CapacitanceInfo.SidewallCapacitance sidewalls = 202;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_sidewalls_size());
       i < n; i++) {
    const auto& repfield = this->_internal_sidewalls().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            202, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .kpex.tech.CapacitanceInfo.SideOverlapCapacitance sideoverlaps = 203;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_sideoverlaps_size());
       i < n; i++) {
    const auto& repfield = this->_internal_sideoverlaps().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            203, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kpex.tech.CapacitanceInfo)
  return target;
}

::size_t CapacitanceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kpex.tech.CapacitanceInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kpex.tech.CapacitanceInfo.SubstrateCapacitance substrates = 200;
  total_size += 2UL * this->_internal_substrates_size();
  for (const auto& msg : this->_internal_substrates()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .kpex.tech.CapacitanceInfo.OverlapCapacitance overlaps = 201;
  total_size += 2UL * this->_internal_overlaps_size();
  for (const auto& msg : this->_internal_overlaps()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .kpex.tech.CapacitanceInfo.SidewallCapacitance sidewalls = 202;
  total_size += 2UL * this->_internal_sidewalls_size();
  for (const auto& msg : this->_internal_sidewalls()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .kpex.tech.CapacitanceInfo.SideOverlapCapacitance sideoverlaps = 203;
  total_size += 2UL * this->_internal_sideoverlaps_size();
  for (const auto& msg : this->_internal_sideoverlaps()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CapacitanceInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CapacitanceInfo*>(&to_msg);
  auto& from = static_cast<const CapacitanceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kpex.tech.CapacitanceInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_substrates()->MergeFrom(
      from._internal_substrates());
  _this->_internal_mutable_overlaps()->MergeFrom(
      from._internal_overlaps());
  _this->_internal_mutable_sidewalls()->MergeFrom(
      from._internal_sidewalls());
  _this->_internal_mutable_sideoverlaps()->MergeFrom(
      from._internal_sideoverlaps());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CapacitanceInfo::CopyFrom(const CapacitanceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kpex.tech.CapacitanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CapacitanceInfo::IsInitialized() const {
  return true;
}

void CapacitanceInfo::InternalSwap(CapacitanceInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.substrates_.InternalSwap(&other->_impl_.substrates_);
  _impl_.overlaps_.InternalSwap(&other->_impl_.overlaps_);
  _impl_.sidewalls_.InternalSwap(&other->_impl_.sidewalls_);
  _impl_.sideoverlaps_.InternalSwap(&other->_impl_.sideoverlaps_);
}

::google::protobuf::Metadata CapacitanceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[8]);
}
// ===================================================================

class StyleVariant::_Internal {
 public:
};

StyleVariant::StyleVariant(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:kpex.tech.StyleVariant)
}
StyleVariant::StyleVariant(
    ::google::protobuf::Arena* arena,
    const StyleVariant& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  StyleVariant* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:kpex.tech.StyleVariant)
}









::google::protobuf::Metadata StyleVariant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_extract_2eproto_getter,
                                   &descriptor_table_extract_2eproto_once,
                                   file_level_metadata_extract_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace tech
}  // namespace kpex
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_extract_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
