# --------------------------------------------------------------------------------
# spdx-filecopyrighttext: 2024-2025 martin jan köhler and harald pretl
# johannes kepler university, institute for integrated circuits.
#
# this file is part of kpex 
# (see https://github.com/martinjankoehler/klayout-pex).
#
# this program is free software: you can redistribute it and/or modify
# it under the terms of the gnu general public license as published by
# the free software foundation, either version 3 of the license, or
# (at your option) any later version.
#
# this program is distributed in the hope that it will be useful,
# but without any warranty; without even the implied warranty of
# merchantability or fitness for a particular purpose.  see the
# gnu general public license for more details.
#
# you should have received a copy of the gnu general public license
# along with this program. if not, see <http://www.gnu.org/licenses/>.
# spdx-license-identifier: gpl-3.0-or-later
# --------------------------------------------------------------------------------

@0xfc6f94d94af037ae;  # unique file id, generated by `capnp id`


#
# this file is roughly based on
# https://github.com/rtimothyedwards/capiche
#


struct ProcessStackInfo {

    enum LayerType {
        unspecified         @0;
        substrate           @1;
        nwell               @2;
        diffusion           @3;
        fieldOxide          @4;
        simpleDielectric    @5;
        conformalDielectric @6;
        sidewallDielectric  @7;
        metal               @8;
    }

    struct Contact { # Contact/Via
        # because contact name do not uniquely describe
        # the connected layers and the height,
        # these are used as part of a MetalLayer
        # for example, sky130 has
        #     * field poly <-> licon <-> li1 (height 0.4299)
        #     * diffusion <-> licon <-> li1 (height 0.9361)
        #     * cap2m <-> via4 <-> metal5
        #     * metal5 <-> via4 <-> metal5

        name        @0 :Text;
        layerBelow  @1 :Text;
        layerAbove  @2 :Text;
        thickness   @3 :Float64;
        
        # NOTE: if a drawn via polygon is larger than the actual via dimensions,
        #       an array is created
        width       @4 :Float64;
        spacing     @5 :Float64;
        border      @6 :Float64;
    }

    struct SubstrateLayer {
        height    @0 :Float64; # height in µm (of the layer bottom) below 0, can be negative
        thickness @1 :Float64; # thickness of the substrate plane
        reference @2 :Text;   # name of the dielectric type
    }

    struct NWellLayer {
        z             @0 :Float64; # z-offset in µm (of the layer bottom), relative to the substrate
        reference     @1 :Text;    # name of the dielectric type above the substrate
        contactAbove  @2 :Contact;
    }

    struct DiffusionLayer {
        z             @0 :Float64; # z-offset in µm (of the layer bottom), relative to the substrate
        reference     @1 :Text;    # name of the dielectric type above the substrate
        contactAbove  @2 :Contact;
    }

    struct FieldOxideLayer { # Field oxide type, which is directly above the substrate
        dielectricK  @0 :Float64;
    }

    struct SimpleDielectricLayer { # Simple dielectric
        dielectricK  @0 :Float64;
        reference    @1 :Text;
    }
    
    struct ConformalDielectricLayer { # Conformal dielectric
        dielectricK            @0 :Float64;
        thicknessOverMetal     @1 :Float64;
        thicknessWhereNoMetal  @2 :Float64;
        thicknessSidewall      @3 :Float64;
        reference              @4 :Text;
    }

    struct SidewallDielectricLayer { # Sidewall dielectric
        dielectricK            @0 :Float64;
        heightAboveMetal       @1 :Float64; # might be 0 if none
        widthOutsideSidewall   @2 :Float64;
        reference              @3 :Text;
    }

    struct MetalLayer { # Metal
        z             @0 :Float64; # z-offset in µm (of the layer bottom), relative to the substrate
        thickness     @1 :Float64; # thickness in µm
        contactAbove  @2 :Contact;
    }

    struct LayerInfo {
        name       @0 :Text;
        layerType  @1 :LayerType;
        
        union {
            substrateLayer            @2 :SubstrateLayer;
            nwellLayer                @3 :NWellLayer;
            diffusionLayer            @4 :DiffusionLayer;
            fieldOxideLayer           @5 :FieldOxideLayer;
            simpleDielectricLayer     @6 :SimpleDielectricLayer;
            conformalDielectricLayer  @7 :ConformalDielectricLayer;
            sidewallDielectricLayer   @8 :SidewallDielectricLayer;
            metalLayer                @9 :MetalLayer;
        }
    }
    
    layers @0 :List(LayerInfo);
}
