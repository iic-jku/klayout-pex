# --------------------------------------------------------------------------------
# SPDX-FileCopyrightText: 2024-2025 Martin Jan Köhler and Harald Pretl
# Johannes Kepler University, Institute for Integrated Circuits.
#
# This file is part of KPEX 
# (see https://github.com/martinjankoehler/klayout-pex).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
# SPDX-License-Identifier: GPL-3.0-or-later
# --------------------------------------------------------------------------------

@0x9ec6f0b273220fb5;  # unique file ID, generated by `capnp id`

#
# This file is roughly based on
# the extract section of
# https://github.com/RTimothyEdwards/open_pdks/blob/master/sky130/magic/sky130.tech
#

struct ProcessParasiticsInfo {
    # we do all in µm
    sideHalo   @0 :Float64;
    
    resistance  @1 :ResistanceInfo;
    capacitance @2 :CapacitanceInfo;
}

struct ResistanceInfo {
    
    # resistances are in milliohm / µm^2
    struct LayerResistance {
        layerName                 @0 :Text;
        resistance                 @1 :Float64;
        cornerAdjustmentFraction @2 :Float64;
    }
    
    struct ContactResistance {
        contactName      @0 :Text;     # e.g. licon1
        deviceLayerName @1 :Text;     # e.g. nsdm, psdm, poly, ...
        resistance        @2 :Float64;  # resistances are in milliohm / CNT
    }
    
    # resistances are in milliohm / CNT
    struct ViaResistance {
        viaName   @0 :Text;
        resistance @1 :Float64;
    }

    layers   @0 :List(LayerResistance);
    contacts @1 :List(ContactResistance);
    vias     @2 :List(ViaResistance);
}

struct CapacitanceInfo {

    struct SubstrateCapacitance {
        layerName            @0 :Text;
        areaCapacitance      @1 :Float64;  # in attoFarad / µm^2
        perimeterCapacitance @2 :Float64;  # in attoFarad / µm
    }

    struct OverlapCapacitance {
        topLayerName     @0 :Text;
        bottomLayerName  @1 :Text;
        capacitance        @2 :Float64;  # in attoFarad / µm
    }

    struct SidewallCapacitance {
        layerName  @0 :Text;
        capacitance @1 :Float64;  # in attoFarad / µm
        offset      @2 :Float64;
    }

    struct SideOverlapCapacitance {
        inLayerName  @0 :Text;
        outLayerName @1 :Text;
        capacitance    @2 :Float64;  # in attoFarad / µm
    }

    substrates   @0 :List(SubstrateCapacitance);
    overlaps     @1 :List(OverlapCapacitance);
    sidewalls    @2 :List(SidewallCapacitance);
    sideoverlaps @3 :List(SideOverlapCapacitance);
}

# ----------------------------------------------------------------------------------


struct StyleVariant {
    # TODO
}

