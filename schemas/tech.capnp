# --------------------------------------------------------------------------------
# SPDX-FileCopyrightText: 2024-2025 Martin Jan KÃ¶hler and Harald Pretl
# Johannes Kepler University, Institute for Integrated Circuits.
#
# This file is part of KPEX 
# (see https://github.com/martinjankoehler/klayout-pex).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
# SPDX-License-Identifier: GPL-3.0-or-later
# --------------------------------------------------------------------------------

@0x9959b503a362f049;  # unique file ID, generated by `capnp id`

using import "process_stack.capnp".ProcessStackInfo;
using import "process_parasitics.capnp".ProcessParasiticsInfo;

struct Technology {
    # name of the technology, e.g. "sky130A"
    name  @0 :Text;

    # PEX relevant layers as given in a layout
    layers @1 :List(LayerInfo);

    #  Mapping of layer name to layer/datatype for computed layers (introduced by LVS)
    #  
    #     NOTE: the names are from computed layers.
    #     For example in sky130A, the tap original layer is split into ntap and ptap,
    #     so there is no directly matching layer/datatype combination from original layer space.
    #     Other layers are mapped to functionally equivalent layers.
    lvsComputedLayers @2 :List(ComputedLayerInfo);

    # Detailed description of the process stack,
    # including thicknesses, dielectrics, etc.
    processStack @3 :ProcessStackInfo;

    # Parasistic data for the magic-like PEX engine
    processParasitics @4 :ProcessParasiticsInfo;
}

struct GDSPair {
    layer    @0 :UInt32;
    datatype @1 :UInt32;
}

struct LayerInfo {
    name        @0 :Text;
    description @1 :Text;
    
    drwGDSPair   @2 :GDSPair;
    pinGDSPair   @3 :GDSPair;
    labelGDSPair @4 :GDSPair;
}

struct ComputedLayerInfo {
    enum Kind {
        unspecified      @0;
        regular          @1;
        deviceCapacitor  @2; # e.g. useful to test the PEX engine using cap stdcells
                             # (or to ignore those devices in regular end user PEX use cases,
                             #  where the SPICE models of the devices already handle this)
        deviceResistor   @3; # same for resistors
        pin              @4;
    }

    kind               @0 :Kind;
    layerInfo          @1 :LayerInfo;
    originalLayerName  @2 :Text; # name of the regular layer this is derived from
}
