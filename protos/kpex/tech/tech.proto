// --------------------------------------------------------------------------------
// SPDX-FileCopyrightText: 2024-2025 Martin Jan KÃ¶hler and Harald Pretl
// Johannes Kepler University, Institute for Integrated Circuits.
//
// This file is part of KPEX 
// (see https://github.com/iic-jku/klayout-pex).
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
// SPDX-License-Identifier: GPL-3.0-or-later
// --------------------------------------------------------------------------------
syntax = "proto3";

package kpex.tech;

import "kpex/tech/process_stack.proto";
import "kpex/tech/process_parasitics.proto";

message Technology {
    // name of the technology, e.g. "sky130A"
    string name = 1;

    // PEX relevant layers as given in a layout
    repeated LayerInfo layers = 101;

    //  Mapping of layer name to layer/datatype for computed layers (introduced by LVS)
    //
    //     NOTE: the names are from computed layers.
    //     For example in sky130A, the tap original layer is split into ntap and ptap,
    //     so there is no directly matching layer/datatype combination from original layer space.
    //     Other layers are mapped to functionally equivalent layers.
    repeated ComputedLayerInfo lvs_computed_layers = 120;

    // Detailed description of the process stack,
    // including thicknesses, dielectrics, etc.
    ProcessStackInfo process_stack = 140;

    // Parasistic data for the magic-like PEX engine
    ProcessParasiticsInfo process_parasitics = 200;
}

message GDSPair {
    uint32 layer = 1;
    uint32 datatype = 2;
}

message LayerInfo {
    enum Purpose {
        PURPOSE_UNSPECIFIED = 0;
        PURPOSE_DNWELL = 1;
        PURPOSE_NWELL = 2;
        PURPOSE_PWELL = 3;
        PURPOSE_DIFF = 4;
        PURPOSE_NTAP_OR_PTAP = 5;
        PURPOSE_NTAP = 6;
        PURPOSE_PTAP = 7;
        PURPOSE_P_IMPLANT = 8;
        PURPOSE_N_IMPLANT = 9;
        PURPOSE_CONTACT = 10;
        PURPOSE_METAL = 11;
        PURPOSE_VIA = 12;
        PURPOSE_MIM_CAP = 13; // cap plate over metal
    }

    Purpose purpose = 10;

    string name = 20;
    string description = 30;
    
    GDSPair drw_gds_pair = 40;
    GDSPair pin_gds_pair = 50;
    GDSPair label_gds_pair = 60;
}

message ComputedLayerInfo {
    enum Kind {
        KIND_UNSPECIFIED = 0;
        KIND_REGULAR = 1;
        KIND_DEVICE_CAPACITOR = 2; // e.g. useful to test the PEX engine using cap stdcells
                                   // (or to ignore those devices in regular end user PEX use cases,
                                   //  where the SPICE models of the devices already handle this)
        KIND_DEVICE_RESISTOR = 3;  // same for resistors
        KIND_PIN = 4;
        KIND_LABEL = 5;
    }

    Kind kind = 10;
    LayerInfo layer_info = 20;
    string original_layer_name = 40; // name of the regular layer this is derived from
}
