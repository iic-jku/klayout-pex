// --------------------------------------------------------------------------------
// SPDX-FileCopyrightText: 2024-2025 Martin Jan Köhler and Harald Pretl
// Johannes Kepler University, Institute for Integrated Circuits.
//
// This file is part of KPEX 
// (see https://github.com/martinjankoehler/klayout-pex).
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
// SPDX-License-Identifier: GPL-3.0-or-later
// --------------------------------------------------------------------------------

//
// This file is roughly based on
// the extract section of
// https://github.com/RTimothyEdwards/open_pdks/blob/master/sky130/magic/sky130.tech
//
syntax = "proto3";

package kpex.tech;

message ProcessParasiticsInfo {
    // we do all in µm
    
    double side_halo = 10;
    
    ResistanceInfo resistance = 110;
    CapacitanceInfo capacitance = 111;
}


message ResistanceInfo {
    
    // resistances are in milliohm / µm^2
    message LayerResistance {
        string layer_name = 1;
        double resistance = 2;
        double corner_adjustment_fraction = 3;
    }
    
    message ContactResistance {
        string contact_name = 1; // e.g. licon1
        string device_layer_name = 2;  // e.g. nsdm, psdm, poly, ...
        string layer_above = 3;
        double resistance = 10;  // resistances are in milliohm / CNT
    }
    
    // resistances are in milliohm / CNT
    message ViaResistance {
        string via_name = 1;
        double resistance = 2;
    }

    repeated LayerResistance layers = 10;
    repeated ContactResistance contacts = 20;
    repeated ViaResistance vias = 30;
}

message CapacitanceInfo {

    message SubstrateCapacitance {
        string layer_name = 1;
        double area_capacitance = 2;       // in attoFarad / µm^2
        double perimeter_capacitance = 3;  // in attoFarad / µm
    }

    message OverlapCapacitance {
        string top_layer_name = 1;
        string bottom_layer_name = 2;
        double capacitance = 3;  // in attoFarad / µm
    }

    message SidewallCapacitance {
        string layer_name = 1;
        double capacitance = 2;  // in attoFarad / µm
        double offset = 3;
    }

    message SideOverlapCapacitance {
        string in_layer_name = 1;
        string out_layer_name = 2;
        double capacitance = 3;  // in attoFarad / µm
    }

    repeated SubstrateCapacitance substrates = 200;
    repeated OverlapCapacitance overlaps = 201;
    repeated SidewallCapacitance sidewalls = 202;
    repeated SideOverlapCapacitance sideoverlaps = 203;
}

// ----------------------------------------------------------------------------------


message StyleVariant {
    
}

